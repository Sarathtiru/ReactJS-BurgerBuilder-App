{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","C_UI_Developer_Training_ReactJS_burger_proj_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","C_UI_Developer_Training_ReactJS_burger_proj_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.7c8a175b.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.css'; \r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case('input'):\r\n           inputElement = <input \r\n                className ={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}      \r\n               />;\r\n           break;\r\n        case('textarea'):\r\n           inputElement = <textarea \r\n                className ={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}\r\n               />;\r\n           break;\r\n        case('select'):\r\n           inputElement = (\r\n           <select className ={inputClasses.join(' ')}   \r\n                   value={props.value}\r\n                   onChange={props.changed}\r\n                  >\r\n                   {props.elementConfig.options.map(option =>(\r\n                       <option key ={option.value}value={option.value}>\r\n                           {option.displayValue }\r\n                       </option>\r\n                   ))}\r\n           </select>\r\n           );\r\n        break;\r\n        default: \r\n           inputElement = <input className ={inputClasses.join(' ')}  \r\n           {...props.elementConfig} value={props.value}/>;\r\n    }\r\n    return(\r\n\r\n        <div className = {classes.Input}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n        \r\n        \r\n    </div>\r\n\r\n    )\r\n    \r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__1TInt\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  };\r\n\r\n  componentDidMount() {\r\n      if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n          this.props.onSetAuthRedirectPath();\r\n      }\r\n  }\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      }\r\n    };\r\n    \r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={event => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n\r\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n      onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Auth);\r\n"],"sourceRoot":""}